# Construct index sequences
<hint title="ðŸ“¦ Import libraries (click to open/close)">
```coq
Require Import Arith.Even.
Require Import ZArith.ZArith.
Require Import FunctionalExtensionality.

Require Import Waterproof.Tactics.
Require Import Waterproof.Notations.Common.
Require Import Waterproof.Notations.Reals.
Require Import Waterproof.Notations.Sets.
Require Import Waterproof.Chains.
Require Import Waterproof.Automation.
Require Import Waterproof.Libs.Analysis.SequencesMetric.
Require Import Waterproof.Libs.Analysis.SubsequencesMetric.
Require Import Waterproof.Libs.Analysis.StrongInductionIndexSequence.

Open Scope metric_scope.

Waterproof Enable Automation RealsAndIntegers.
Waterproof Enable Automation Intuition.

Open Scope nat_scope.

Inductive Color : Set :=
| blue : Color
| orange : Color.

Inductive answer : Type :=
| Yes : answer.
(** *)
(** *)

```
</hint>
## Exercise 10.7.6

```coq
Section colors.
Variable P : â„• â†’ Color.

Parameter infinitely_many_blues :
  âˆ€ k âˆˆ â„•, âˆƒ m â‰¥ k, P(m) = blue.

Lemma exercise_10_7_6 : âˆƒ n : (â„• â†’ â„•),
  (is_index_sequence n) âˆ§ (âˆ€ k âˆˆ â„•, P(n(k)) = blue).
Proof.
Define the index sequence n inductively.
```
<input-area>
```coq
We first define n_0.
We need to show that (âˆƒ n_0 âˆˆ â„•, P(n_0) = blue).
By (infinitely_many_blues) it holds that (âˆ€ k âˆˆ â„•, âˆƒ m â‰¥ k, P(m) = blue) (i).
Use k := (0) in (i).
{ Indeed, (0 âˆˆ â„•). }
It holds that (âˆƒ m â‰¥ 0, P(m) = blue) (ii).
Obtain m according to (ii).
Choose n_0 := (m).
{ Indeed, (n_0 âˆˆ â„•). }
We need to show that (P(n_0) = blue).
Since (n_0 = m) we conclude that (P(n_0) = blue).
Take k âˆˆ â„• and assume n_0,...,n_k are defined.
We need to show that ((âˆ€ l â‰¤ k, P(n(l)) = blue) â‡’ (âˆ€ l < k, n(l) < n(l + 1)) â‡’ âˆƒ n_kplus1 âˆˆ â„•, P(n_kplus1) = blue âˆ§ n(k) < n_kplus1).

```
</input-area>
```coq
Qed.
```
```coq
End colors.
```

## Declaration of own work

Please declare that the work above is your own work, by writing `Yes.` as an answer on the line below. In particular, this means that the proofs above are typed by yourself, and that you could give an explanation of the proof when asked.
```coq
Definition own_work : answer. exact
```
<input-area>
```coq
Yes.
```
</input-area>
```coq
Qed.
```
